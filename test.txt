.employee-shift-editor {
  padding: 16px;
}

/* Search Card Styles */
.search-card {
  margin-bottom: 16px;
}

.employee-info {
  background: #f0f2f5;
  padding: 12px;
  border-radius: 6px;
  border-left: 4px solid #1890ff;
}

.employee-info h4 {
  margin: 0 0 8px 0;
  color: #262626;
  font-weight: 600;
}

.employee-info p {
  margin: 0;
  color: #595959;
  font-size: 14px;
}

/* Data Card Styles */
.data-card {
  margin-bottom: 16px;
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.table-header h3 {
  margin: 0;
  color: #262626;
}

.table-actions {
  display: flex;
  gap: 8px;
}

.table-actions button {
  border-radius: 6px;
}

/* Statistics Row */
.statistics-row {
  background: #fafafa;
  padding: 16px;
  border-radius: 6px;
  margin-bottom: 16px;
  border: 1px solid #f0f0f0;
}

.stat-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background: white;
  border-radius: 4px;
  border: 1px solid #e8e8e8;
}

.stat-label {
  font-weight: 500;
  color: #595959;
}

.stat-value {
  font-weight: 600;
  font-size: 16px;
  color: #262626;
}

.stat-value.modified {
  color: #fa8c16;
}

.stat-value.selected {
  color: #52c41a;
}

/* Table Styles */
.nz-table {
  border-radius: 6px;
  overflow: hidden;
}

.modified-row {
  background-color: #fff7e6 !important;
}

.selected-row {
  background-color: #f6ffed !important;
}

.modified-row.selected-row {
  background-color: #e6f7ff !important;
}

.shift-type-select {
  width: 100%;
  min-width: 200px;
}

.shift-type-select.modified-select {
  border-color: #fa8c16;
}

.shift-type-select.modified-select .ant-select-selector {
  border-color: #fa8c16 !important;
  box-shadow: 0 0 0 2px rgba(250, 140, 22, 0.2);
}

.status-tag {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  font-size: 12px;
}

/* No Data Card */
.no-data-card {
  text-align: center;
  margin-top: 50px;
}

.no-data-content {
  padding: 40px 20px;
}

.no-data-icon {
  font-size: 64px;
  color: #d9d9d9;
  margin-bottom: 16px;
  display: block;
}

.no-data-content h3 {
  color: #595959;
  margin-bottom: 8px;
}

.no-data-content p {
  color: #8c8c8c;
  margin: 0;
}

/* Loading Container */
.loading-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
}

/* Table Header Styles */
::ng-deep .ant-table-thead > tr > th {
  background-color: #fafafa;
  font-weight: 600;
  color: #262626;
  border-bottom: 2px solid #e8e8e8;
}

/* Responsive Design */
@media (max-width: 768px) {
  .table-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }

  .table-actions {
    flex-wrap: wrap;
    width: 100%;
  }

  .table-actions button {
    flex: 1;
    min-width: 120px;
  }

  .statistics-row .ant-col {
    margin-bottom: 8px;
  }
}

/* Custom Scrollbar */
::ng-deep .ant-table-body {
  scrollbar-width: thin;
  scrollbar-color: #bfbfbf #f0f0f0;
}

::ng-deep .ant-table-body::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::ng-deep .ant-table-body::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 4px;
}

::ng-deep .ant-table-body::-webkit-scrollbar-thumb {
  background: #bfbfbf;
  border-radius: 4px;
}

::ng-deep .ant-table-body::-webkit-scrollbar-thumb:hover {
  background: #999999;
}

/* Animation for row changes */
.modified-row {
  transition: background-color 0.3s ease;
}

.selected-row {
  transition: background-color 0.3s ease;
}

/* Button hover effects */
.table-actions button:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

/* Select dropdown styling */
::ng-deep .shift-type-select .ant-select-dropdown {
  border-radius: 6px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
}

::ng-deep .shift-type-select .ant-select-item-option-selected {
  background-color: #e6f7ff;
  font-weight: 600;
}

/* Card hover effects */
.search-card:hover,
.data-card:hover {
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease;
}

/* Tag animations */
.status-tag {
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Bulk Edit Controls */
.bulk-edit-controls {
  margin-top: 16px;
  padding: 16px;
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  border-left: 4px solid #52c41a;
}

.bulk-edit-label {
  font-weight: 600;
  color: #262626;
  display: flex;
  align-items: center;
  gap: 8px;
}

.bulk-shift-select {
  width: 100%;
}

.bulk-edit-info {
  color: #52c41a;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}





<div class="employee-shift-editor">
    <!-- Search Section -->
    <nz-card nzTitle="Tìm kiếm nhân viên" class="search-card">
        <nz-row [nzGutter]="16" nzAlign="middle">
            <nz-col [nzSpan]="8">
                <nz-input [(ngModel)]="employeeCode" placeholder="Nhập mã nhân viên" nzSize="large"
                    (keyup.enter)="searchEmployee()">
                    <ng-template nzPrefix>
                        <span nz-icon nzType="user" nzTheme="outline"></span>
                    </ng-template>
                </nz-input>
            </nz-col>
            <nz-col [nzSpan]="4">
                <button nz-button nzType="primary" nzSize="large" (click)="searchEmployee()" [nzLoading]="isLoading">
                    <span nz-icon nzType="search"></span>
                    Tìm kiếm
                </button>
            </nz-col>
            <nz-col [nzSpan]="12" *ngIf="employeeData">
                <div class="employee-info">
                    <h4>
                        <span nz-icon nzType="user" nzTheme="outline"></span>
                        {{ employeeData.fullName }} ({{ employeeData.code }})
                    </h4>
                    <p>
                        <strong>Nhóm:</strong> {{ employeeData.group }} |
                        <strong>Ca:</strong> {{ employeeData.shift }} |
                        <strong>Cấp bậc:</strong> {{ employeeData.grade }}
                    </p>
                </div>
            </nz-col>
        </nz-row>
    </nz-card>

    <!-- Data Table Section -->
    <nz-card *ngIf="employeeData && shiftRecords.length > 0" [nzTitle]="tableTitle" class="data-card">
        <ng-template #tableTitle>
            <div class="table-header">
                <h3>Lịch làm việc tháng {{ selectedMonth }}</h3>
                <div class="table-actions">
                    <button nz-button nzType="default" (click)="selectAll()" [disabled]="shiftRecords.length === 0">
                        <span nz-icon nzType="check-square"></span>
                        Chọn tất cả
                    </button>
                    <button nz-button nzType="default" (click)="selectAllModified()" [disabled]="modifiedCount === 0">
                        <span nz-icon nzType="edit"></span>
                        Chọn thay đổi ({{ modifiedCount }})
                    </button>
                    <button nz-button nzType="default" (click)="clearSelection()" [disabled]="selectedCount === 0">
                        <span nz-icon nzType="close-square"></span>
                        Bỏ chọn tất cả
                    </button>
                    <button nz-button nzType="primary" (click)="saveChanges()" [disabled]="selectedCount === 0"
                        [nzLoading]="isLoading">
                        <span nz-icon nzType="save"></span>
                        Lưu thay đổi ({{ selectedCount }})
                    </button>
                </div>
            </div>
        </ng-template>

        <!-- Statistics and Bulk Edit -->
        <div class="statistics-row" *ngIf="shiftRecords.length > 0">
            <nz-row [nzGutter]="16">
                <nz-col [nzSpan]="6">
                    <div class="stat-item">
                        <span class="stat-label">Tổng số ngày:</span>
                        <span class="stat-value">{{ shiftRecords.length }}</span>
                    </div>
                </nz-col>
                <nz-col [nzSpan]="6">
                    <div class="stat-item">
                        <span class="stat-label">Số thay đổi:</span>
                        <span class="stat-value modified">{{ modifiedCount }}</span>
                    </div>
                </nz-col>
                <nz-col [nzSpan]="6">
                    <div class="stat-item">
                        <span class="stat-label">Đã chọn:</span>
                        <span class="stat-value selected">{{ selectedCount }}</span>
                    </div>
                </nz-col>
                <nz-col [nzSpan]="6">
                    <div class="stat-item">
                        <span class="stat-label">Tháng:</span>
                        <span class="stat-value">{{ selectedMonth }}/{{ currentYear }}</span>
                    </div>
                </nz-col>
            </nz-row>

            <!-- Bulk Edit Controls -->
            <div *ngIf="showBulkShiftSelect" class="bulk-edit-controls">
                <nz-row [nzGutter]="16" nzAlign="middle">
                    <nz-col [nzSpan]="4">
                        <span class="bulk-edit-label">
                            <span nz-icon nzType="edit" nzTheme="outline"></span>
                            Chỉnh sửa hàng loạt:
                        </span>
                    </nz-col>
                    <nz-col [nzSpan]="8">
                        <nz-select [(ngModel)]="bulkShiftType" (ngModelChange)="onBulkShiftTypeChange()"
                            nzSize="default" class="bulk-shift-select" nzPlaceHolder="Chọn loại ca mới">
                            <nz-option *ngFor="let option of shiftTypeOptions" [nzLabel]="option.label"
                                [nzValue]="option.value"></nz-option>
                        </nz-select>
                    </nz-col>
                    <nz-col [nzSpan]="12">
                        <span class="bulk-edit-info">
                            <span nz-icon nzType="info-circle" nzTheme="outline"></span>
                            Đang chỉnh sửa {{ selectedRecords.length }} ngày đã chọn
                        </span>
                    </nz-col>
                </nz-row>
            </div>
        </div>

        <!-- Data Table -->
        <nz-table #shiftTable [nzData]="shiftRecords" [nzSize]="'middle'" [nzPageSize]="31" [nzShowPagination]="false"
            [nzScroll]="{ y: '500px' }" [nzLoading]="isLoading">
            <thead>
                <tr>
                    <th nzWidth="60px">
                        <label nz-checkbox>Chọn</label>
                    </th>
                    <th nzWidth="60px">STT</th>
                    <th nzWidth="120px">Ngày</th>
                    <th nzWidth="200px">Họ và Tên</th>
                    <th nzWidth="100px">Group</th>
                    <th nzWidth="80px">Ca làm việc</th>
                    <th nzWidth="250px">Loại ca</th>
                    <th>Trạng thái</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let record of shiftRecords; let i = index" [class.modified-row]="record.isModified"
                    [class.selected-row]="record.checked">
                    <td>
                        <label nz-checkbox [(ngModel)]="record.checked"
                            (ngModelChange)="onCheckboxChange(record)"></label>
                    </td>
                    <td>{{ i + 1 }}</td>
                    <td>{{ formatDate(record.date) }}</td>
                    <td>{{ record.fullName }}</td>
                    <td>{{ record.group }}</td>
                    <td>{{ record.shift }}</td>
                    <td>
                        <nz-select [(ngModel)]="record.shiftType" (ngModelChange)="onShiftTypeChange(record)"
                            nzSize="small" class="shift-type-select" [class.modified-select]="record.isModified">
                            <nz-option *ngFor="let option of shiftTypeOptions" [nzLabel]="option.label"
                                [nzValue]="option.value"></nz-option>
                        </nz-select>
                    </td>
                    <td>
                        <span *ngIf="record.isModified" nz-tag nzColor="orange" class="status-tag">
                            <span nz-icon nzType="edit" nzTheme="outline"></span>
                            Đã thay đổi
                        </span>
                        <span *ngIf="record.checked" nz-tag nzColor="green" class="status-tag">
                            <span nz-icon nzType="check" nzTheme="outline"></span>
                            Đã chọn
                        </span>
                        <span *ngIf="!record.isModified && !record.checked" nz-tag nzColor="default" class="status-tag">
                            <span nz-icon nzType="minus" nzTheme="outline"></span>
                            Không thay đổi
                        </span>
                    </td>
                </tr>
            </tbody>
        </nz-table>
    </nz-card>

    <!-- No Data Message -->
    <nz-card *ngIf="!employeeData && !isLoading" class="no-data-card">
        <div class="no-data-content">
            <span nz-icon nzType="user-add" nzTheme="outline" class="no-data-icon"></span>
            <h3>Nhập mã nhân viên để xem lịch làm việc</h3>
            <p>Vui lòng nhập mã nhân viên vào ô tìm kiếm bên trên để hiển thị lịch làm việc trong tháng.</p>
        </div>
    </nz-card>

    <!-- Loading Spinner -->
    <div *ngIf="isLoading" class="loading-container">
        <nz-spin nzSize="large">
            <ng-template #nzIndicator>
                <span nz-icon nzType="loading" style="font-size: 24px;"></span>
            </ng-template>
        </nz-spin>
    </div>
</div>




import {
  Component,
  Input,
  OnInit,
  OnChanges,
  SimpleChanges,
} from "@angular/core";
import { CommonModule } from "@angular/common";
import { FormsModule } from "@angular/forms";
import { NzTableModule } from "ng-zorro-antd/table";
import { NzInputModule } from "ng-zorro-antd/input";
import { NzButtonModule } from "ng-zorro-antd/button";
import { NzSelectModule } from "ng-zorro-antd/select";
import { NzCheckboxModule } from "ng-zorro-antd/checkbox";
import { NzMessageModule } from "ng-zorro-antd/message";
import { NzCardModule } from "ng-zorro-antd/card";
import { NzGridModule } from "ng-zorro-antd/grid";
import { NzSpinModule } from "ng-zorro-antd/spin";
import { NzIconModule } from "ng-zorro-antd/icon";
import { NzTagModule } from "ng-zorro-antd/tag";

import { BaseComponent } from "../../../base/base/base.component";
import { ShiftType } from "../../../model/enum.shift.type";
import { HistoryShiftChange } from "../../../model/history.shift.change";
import { HistoryShiftChangeService } from "../../../service/history-shift-change.service";
import { HrBtypeShift } from "../../../model/hr.btype.shift";
import { UserWorkSchedule } from "../../../model/user.work.schedule";
import { ApiResponse } from "../../../responses/api.response";
import { MockDataService, MockEmployeeData } from "../../../service/mock-data.service";
import { HttpErrorResponse } from "@angular/common/http";

interface EmployeeShiftRecord {
  id: number;
  checked: boolean;
  date: Date;
  fullName: string;
  group: string;
  shift: string;
  shiftType: number;
  originalShiftType: number;
  isModified: boolean;
}

@Component({
  selector: "app-employee-shift-editor",
  standalone: true,
  imports: [
      CommonModule,
      FormsModule,
      NzTableModule,
      NzInputModule,
      NzButtonModule,
      NzSelectModule,
      NzCheckboxModule,
      NzMessageModule,
      NzCardModule,
      NzGridModule,
      NzSpinModule,
      NzIconModule,
      NzTagModule,
  ],
  templateUrl: "./employee-shift-editor.component.html",
  styleUrls: ["./employee-shift-editor.component.css"],
})
export class EmployeeShiftEditorComponent
  extends BaseComponent
  implements OnInit, OnChanges {
  @Input() selectedMonth!: number;

  // Search properties
  employeeCode: string = "";
  override isLoading: boolean = false;
  currentYear: number = new Date().getFullYear();
  employeeData: any | null = null;
  shiftRecords: EmployeeShiftRecord[] = [];
  override historyShiftService: HistoryShiftChangeService;

  // Bulk edit properties
  showBulkShiftSelect: boolean = false;
  bulkShiftType: number = ShiftType.N;
  selectedRecords: EmployeeShiftRecord[] = [];

  // Shift type options
  shiftTypeOptions = [
      { label: "Kíp ngày", value: ShiftType.N },
      { label: "Kíp đêm", value: ShiftType.Đ },
      { label: "Ca đêm", value: ShiftType.CĐ },
      { label: "Hành chính", value: ShiftType.HC },
      { label: "Con nhỏ", value: ShiftType._4H },
      { label: "Phép cả ngày", value: ShiftType.P },
      { label: "Phép nửa ngày trước", value: ShiftType.P1 },
      { label: "Phép nửa ngày sau", value: ShiftType.P2 },
      { label: "Không lương cả ngày", value: ShiftType.KL },
      { label: "Không lương nửa ngày trước", value: ShiftType.KL1 },
      { label: "Không lương nửa ngày sau", value: ShiftType.KL2 },
      { label: "Dưỡng sức thai sản", value: ShiftType.CONV_TS },
      { label: "Dưỡng sức ốm", value: ShiftType.CONV_O },
      { label: "Khám thai", value: ShiftType.KT },
      { label: "Ốm normal", value: ShiftType.ON1 },
      { label: "Con ốm", value: ShiftType.CO2 },
      { label: "Ốm dài", value: ShiftType.OM },
      { label: "Hút thai", value: ShiftType.HT },
      { label: "Tránh thai", value: ShiftType.TT1 },
      { label: "Đặc biệt", value: ShiftType.SP },
      { label: "Nghỉ công ty", value: ShiftType.CVN },
      { label: "Làm thêm ngày nghỉ", value: ShiftType.OT },
      { label: "Nghỉ dừng ca", value: ShiftType.SH },
      { label: "Thai sản nữ", value: ShiftType.TS },
      { label: "Nam nghỉ vợ sinh", value: ShiftType.VS },
      { label: "Đi học", value: ShiftType.CT },
      { label: "Tạm dừng hợp đồng", value: ShiftType.SUS },
      { label: "Tai nạn lao động", value: ShiftType.TNLD },
      { label: "Nghỉ bù OT", value: ShiftType.NB },
      { label: "Trực đêm cả ngày", value: ShiftType.NP },
      { label: "Trực đêm chiều", value: ShiftType.NP2 },
      { label: "Swing", value: ShiftType.SW },
  ];

  ngOnInit(): void {
      // Initialize component
      this.loadEmployeeShiftData();
  }

  constructor(
      private mockDataService: MockDataService,
      historyShiftService: HistoryShiftChangeService
  ) {
      super();
      this.historyShiftService = historyShiftService;
  }

  ngOnChanges(changes: SimpleChanges): void {
      if (changes["selectedMonth"] && this.employeeData) {
          this.loadEmployeeShiftData();
      }
  }

  // Search for employee by code using mock data
  searchEmployee(): void {
      if (!this.employeeCode.trim()) {
          this.showMessage('warning', "Vui lòng nhập mã nhân viên");
          return;
      }

      this.isLoading = true;

      // Use mock data service to find employee
      this.mockDataService.getEmployeeByCode(this.employeeCode).subscribe({
          next: (employee: MockEmployeeData | null) => {
              if (employee) {
                  this.loadEmployeeFromMockData(employee);
                  this.showMessage('success', `Đã tìm thấy nhân viên: ${employee.fullName}`);
              } else {
                  this.showMessage('error', "Không tìm thấy nhân viên với mã: " + this.employeeCode);
                  this.clearEmployeeData();
              }
              this.isLoading = false;
          },
          error: (error) => {
              this.showMessage('error', "Lỗi khi tải dữ liệu: " + error.message);
              this.clearEmployeeData();
              this.isLoading = false;
          },
      });
  }

  // Load employee data from mock data
  private loadEmployeeFromMockData(employee: MockEmployeeData): void {
      const year = new Date().getFullYear();
      this.employeeData = this.mockDataService.convertToUserWorkSchedule(employee, year, this.selectedMonth);
      this.loadEmployeeShiftData();
  }

  // Load employee shift data for the month
  private loadEmployeeShiftData(): void {
      if (!this.employeeData) return;

      this.shiftRecords = [];
      this.selectedRecords = [];
      this.showBulkShiftSelect = false;
      this.bulkShiftType = ShiftType.N;

      const workSchedule = this.employeeData.workSchedule || [];

      // Get current month dates
      const year = new Date().getFullYear();
      const month = this.selectedMonth;
      const daysInMonth = new Date(year, month, 0).getDate();

      for (let day = 1; day <= daysInMonth; day++) {
          const currentDate = new Date(year, month - 1, day);

          // Find schedule for this day
          const scheduleForDay = workSchedule.find((schedule: any) => {
              const scheduleDate = new Date(schedule.date);
              return (
                  scheduleDate.getDate() === day &&
                  scheduleDate.getMonth() === month - 1 &&
                  scheduleDate.getFullYear() === year
              );
          });

          let currentShiftType = ShiftType.N; // Default to day shift
          if (scheduleForDay && scheduleForDay.shiftType !== undefined) {
              currentShiftType = scheduleForDay.shiftType;
          }

          const record: EmployeeShiftRecord = {
              id: day,
              checked: false,
              date: currentDate,
              fullName: this.employeeData.fullName || '',
              group: this.employeeData.group || '',
              shift: this.employeeData.shift || '',
              shiftType: currentShiftType,
              originalShiftType: currentShiftType,
              isModified: false,
          };

          this.shiftRecords.push(record);
      }
  }

  // Handle shift type change
  onShiftTypeChange(record: EmployeeShiftRecord): void {
      record.isModified = record.shiftType !== record.originalShiftType;
      record.checked = record.isModified;
      this.updateSelectedRecords();
      this.updateBulkEditVisibility();
  }

  // Handle checkbox change
  onCheckboxChange(record: EmployeeShiftRecord): void {
      if (!record.checked) {
          // If unchecked, reset to original value
          record.shiftType = record.originalShiftType;
          record.isModified = false;
      }
      this.updateSelectedRecords();
      this.updateBulkEditVisibility();
  }

  // Update selected records array
  private updateSelectedRecords(): void {
      this.selectedRecords = this.shiftRecords.filter(record => record.checked);
  }

  // Update bulk edit visibility
  private updateBulkEditVisibility(): void {
      this.showBulkShiftSelect = this.selectedRecords.length >= 2;
      if (!this.showBulkShiftSelect) {
          this.bulkShiftType = ShiftType.N;
      }
  }

  // Handle bulk shift type change
  onBulkShiftTypeChange(): void {
      this.selectedRecords.forEach(record => {
          record.shiftType = this.bulkShiftType;
          record.isModified = record.shiftType !== record.originalShiftType;
      });
  }

  // Enable checkbox for all records (remove disabled state)
  enableAllCheckboxes(): void {
      // This method can be used to programmatically enable all checkboxes
      // if needed for specific business logic
  }

  // Select all records
  selectAll(): void {
      this.shiftRecords.forEach(record => {
          record.checked = true;
      });
      this.updateSelectedRecords();
      this.updateBulkEditVisibility();
  }

  // Select all modified records
  selectAllModified(): void {
      this.shiftRecords.forEach(record => {
          if (record.isModified) {
              record.checked = true;
          }
      });
      this.updateSelectedRecords();
      this.updateBulkEditVisibility();
  }

  // Clear selection
  clearSelection(): void {
      this.shiftRecords.forEach(record => {
          record.checked = false;
          if (record.isModified) {
              record.shiftType = record.originalShiftType;
              record.isModified = false;
          }
      });
      this.updateSelectedRecords();
      this.updateBulkEditVisibility();
  }

  // Save changes
  saveChanges(): void {
      const changedRecords = this.shiftRecords.filter(record => record.checked && record.isModified);

      if (changedRecords.length === 0) {
          this.showMessage('warning', "Không có thay đổi nào được chọn để lưu");
          return;
      }

      // Prepare history shift change records
      const historyRecords: HistoryShiftChange[] = changedRecords.map(record => ({
          id: 0, // Will be set by API
          code: this.employeeData!.code,
          fullName: this.employeeData!.fullName,
          group: this.employeeData!.group,
          groupNew: this.employeeData!.group,
          shift: this.employeeData!.shift,
          shiftNew: this.employeeData!.shift,
          grade: this.employeeData!.grade,
          workingStartDate: record.date,
          workingEndDate: record.date,
          workDays: 1,
          shiftType: record.shiftType,
          workTime: 8, // Default work time
          reason: `Thay đổi loại ca từ ${this.getShiftTypeName(record.originalShiftType)} thành ${this.getShiftTypeName(record.shiftType)}`,
          createDate: new Date(),
          createBy: "System", // Should be current user
      }));

      this.isLoading = true;

      // Call API to save changes (assuming there's a service method for this)
      this.saveShiftChanges(historyRecords)
          .then(() => {
              this.showMessage('success', `Đã lưu thành công ${changedRecords.length} thay đổi`);
              // Update original values to prevent re-saving
              changedRecords.forEach(record => {
                  record.originalShiftType = record.shiftType;
                  record.isModified = false;
                  record.checked = false;
              });
              this.isLoading = false;
          })
          .catch((error) => {
              this.showMessage('error', "Lỗi khi lưu thay đổi: " + error.message);
              this.isLoading = false;
          });
  }

  // Save shift changes (API call)
  private saveShiftChanges(records: HistoryShiftChange[]): Promise<void> {
      return new Promise((resolve, reject) => {
          // Create array of promises for each record
          const savePromises = records.map(record =>
              this.historyShiftService.Create(record).toPromise()
          );

          // Execute all saves
          Promise.all(savePromises)
              .then(() => resolve())
              .catch(error => reject(error));
      });
  }

  // Get shift type name by value
  private getShiftTypeName(shiftTypeValue: number): string {
      const option = this.shiftTypeOptions.find(opt => opt.value === shiftTypeValue);
      return option ? option.label : "Không xác định";
  }

  // Clear employee data
  private clearEmployeeData(): void {
      this.employeeData = null;
      this.shiftRecords = [];
      this.selectedRecords = [];
      this.showBulkShiftSelect = false;
      this.bulkShiftType = ShiftType.N;
  }

  // Get shift type name for display
  getShiftTypeLabel(value: number): string {
      return this.getShiftTypeName(value);
  }

  // Format date for display
  override formatDate(date: Date): string {
      return date.toLocaleDateString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
      });
  }

  // Get modified count
  get modifiedCount(): number {
      return this.shiftRecords.filter(record => record.isModified).length;
  }

  // Get selected count
  get selectedCount(): number {
      return this.shiftRecords.filter(record => record.checked).length;
  }
}




import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, map, of } from 'rxjs';
import { UserWorkSchedule } from '../model/user.work.schedule';
import { ShiftType } from '../model/enum.shift.type';

export interface MockEmployeeData {
    code: string;
    fullName: string;
    group: string;
    grade: string;
    allowanceLevel: string;
    shift: string;
    timeOT: number;
    workSchedule: {
        date: string;
        a: number;
        b: number;
        c: number;
        adm: number;
        groupA: number;
        groupB: number;
    }[];
}

export interface MockDataResponse {
    employees: MockEmployeeData[];
}

@Injectable({
    providedIn: 'root'
})
export class MockDataService {
    private mockDataCache: MockDataResponse | null = null;

    constructor(private http: HttpClient) { }

    // Load mock data from JSON file
    private loadMockData(): Observable<MockDataResponse> {
        if (this.mockDataCache) {
            return of(this.mockDataCache);
        }

        return this.http.get<MockDataResponse>('/assets/mock-data/employee-shift-data.json')
            .pipe(
                map(data => {
                    this.mockDataCache = data;
                    return data;
                })
            );
    }

    // Get employee by code
    getEmployeeByCode(code: string): Observable<MockEmployeeData | null> {
        return this.loadMockData().pipe(
            map(data => {
                const employee = data.employees.find(emp => emp.code === code);
                return employee || null;
            })
        );
    }

    // Search employees by code or name
    searchEmployees(searchTerm: string): Observable<MockEmployeeData[]> {
        return this.loadMockData().pipe(
            map(data => {
                const employees = data.employees;
                const term = searchTerm.toLowerCase();

                return employees.filter(emp =>
                    emp.code.toLowerCase().includes(term) ||
                    emp.fullName.toLowerCase().includes(term)
                );
            })
        );
    }

    // Convert mock data to UserWorkSchedule format
    convertToUserWorkSchedule(employee: MockEmployeeData, year: number, month: number): UserWorkSchedule {
        // Filter schedules for the specified month/year
        const filteredSchedules = employee.workSchedule
            .filter(schedule => {
                const scheduleDate = new Date(schedule.date);
                return scheduleDate.getFullYear() === year && scheduleDate.getMonth() === month - 1;
            })
            .map(schedule => {
                // Determine shift type based on employee's shift group
                let shiftType = ShiftType.N; // Default

                // Map shift values based on employee's shift group
                if (employee.shift === 'A' && schedule.a !== 33) {
                    shiftType = this.convertShiftValue(schedule.a);
                } else if (employee.shift === 'B' && schedule.b !== 33) {
                    shiftType = this.convertShiftValue(schedule.b);
                } else if (employee.shift === 'C' && schedule.c !== 33) {
                    shiftType = this.convertShiftValue(schedule.c);
                } else if (employee.shift === 'HC' && schedule.adm !== 33) {
                    shiftType = this.convertShiftValue(schedule.adm);
                } else if (employee.shift === '2A' && schedule.groupA !== 33) {
                    shiftType = this.convertShiftValue(schedule.groupA);
                } else if (employee.shift === '2B' && schedule.groupB !== 33) {
                    shiftType = this.convertShiftValue(schedule.groupB);
                }

                return {
                    id: 0,
                    date: new Date(schedule.date),
                    shiftType: shiftType,
                    a: schedule.a,
                    b: schedule.b,
                    c: schedule.c,
                    adm: schedule.adm,
                    groupA: schedule.groupA,
                    groupB: schedule.groupB
                };
            });

        return {
            code: employee.code,
            fullName: employee.fullName,
            group: employee.group,
            grade: employee.grade,
            allowanceLevel: employee.allowanceLevel,
            shift: employee.shift,
            timeOT: employee.timeOT,
            workSchedule: filteredSchedules
        };
    }

    // Convert numeric shift values to ShiftType enum
    private convertShiftValue(value: number): ShiftType {
        switch (value) {
            case 1: return ShiftType.N; // Day shift (Kíp ngày)
            case 2: return ShiftType.Đ; // Night shift (Kíp đêm)
            case 3: return ShiftType.CĐ; // Night duty (Ca đêm)
            case 4: return ShiftType.HC; // Administrative (Hành chính)
            case 5: return ShiftType._4H; // Part time (Con nhỏ)
            case 6: return ShiftType.P; // Full day off (Phép cả ngày)
            case 7: return ShiftType.P1; // Morning off (Phép nửa ngày trước)
            case 8: return ShiftType.P2; // Afternoon off (Phép nửa ngày sau)
            case 9: return ShiftType.KL; // No pay full day (Không lương cả ngày)
            case 10: return ShiftType.KL1; // No pay morning (Không lương nửa ngày trước)
            case 11: return ShiftType.KL2; // No pay afternoon (Không lương nửa ngày sau)
            case 33: return ShiftType._; // Empty/undefined
            default: return ShiftType.N; // Default to day shift
        }
    }

    // Get all employees list
    getAllEmployees(): Observable<MockEmployeeData[]> {
        return this.loadMockData().pipe(
            map(data => data.employees)
        );
    }
}












{
  "employees": [
    {
      "code": "PA1605",
      "fullName": "Nguyễn Văn An",
      "group": "PA",
      "grade": "Grade 2",
      "allowanceLevel": "Level 3",
      "shift": "A",
      "timeOT": 12.5,
      "workSchedule": [
        {
          "date": "2025-06-01T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-02T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-03T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-04T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-05T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-06T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-07T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-08T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-09T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-10T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-11T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-12T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-13T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-14T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-15T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-16T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-17T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-18T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-19T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-20T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-21T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-22T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-23T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-24T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-25T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-26T00:00:00Z",
          "a": 2,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-27T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-28T00:00:00Z",
          "a": 6,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-29T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-30T00:00:00Z",
          "a": 1,
          "b": 33,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        }
      ]
    },
    {
      "code": "PA1606",
      "fullName": "Trần Thị Bình",
      "group": "PA",
      "grade": "Grade 1",
      "allowanceLevel": "Level 2",
      "shift": "B",
      "timeOT": 8.0,
      "workSchedule": [
        {
          "date": "2025-06-01T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-02T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-03T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-04T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-05T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-06T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-07T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-08T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-09T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-10T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-11T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-12T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-13T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-14T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-15T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-16T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-17T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-18T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-19T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-20T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-21T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-22T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-23T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-24T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-25T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-26T00:00:00Z",
          "a": 33,
          "b": 2,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-27T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-28T00:00:00Z",
          "a": 33,
          "b": 6,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-29T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-30T00:00:00Z",
          "a": 33,
          "b": 1,
          "c": 33,
          "adm": 33,
          "groupA": 33,
          "groupB": 33
        }
      ]
    },
    {
      "code": "HC1001",
      "fullName": "Lê Văn Cường",
      "group": "HC",
      "grade": "Grade 3",
      "allowanceLevel": "Level 4",
      "shift": "HC",
      "timeOT": 5.5,
      "workSchedule": [
        {
          "date": "2025-06-01T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-02T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-03T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-04T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-05T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-06T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-07T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-08T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-09T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-10T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-11T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-12T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-13T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-14T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-15T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-16T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-17T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-18T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-19T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-20T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-21T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-22T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-23T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-24T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-25T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-26T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-27T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-28T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 6,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-29T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        },
        {
          "date": "2025-06-30T00:00:00Z",
          "a": 33,
          "b": 33,
          "c": 33,
          "adm": 4,
          "groupA": 33,
          "groupB": 33
        }
      ]
    }
  ]
}
